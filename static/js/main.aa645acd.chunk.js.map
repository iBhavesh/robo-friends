{"version":3,"sources":["Components/Scroll.jsx","Components/Card.jsx","Components/CardList.jsx","Components/SearchBox.jsx","Containers/App.jsx","serviceWorker.js","index.jsx"],"names":["Scroll","props","className","children","Card","name","email","id","src","alt","CardList","cardArray","robots","map","robot","key","StrictMode","SearchBox","searchChange","searchField","type","placeholder","value","onChange","App","state","onSearchChange","bind","fetch","then","response","json","users","setState","event","this","target","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mPAMeA,G,MAJA,SAACC,GAAD,OACb,yBAAKC,UAAU,mCAAmCD,EAAME,YCS3CC,G,KAVF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACX,yBAAKL,UAAU,qDACb,yBAAKM,IAAG,+BAA0BD,EAA1B,iBAA6CE,IAAKJ,IAC1D,6BACE,4BAAKA,GACL,2BAAIC,OCOKI,EAXE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACOC,KAAI,SAACC,GAAD,OAC3B,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GAAIA,GAAIO,EAAMP,GAAIF,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,WAEpE,OACE,kBAAC,IAAMU,WAAP,KACE,6BAAML,KCKGM,EAZG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,OAChB,yBAAKjB,UAAU,OACb,2BACEkB,KAAK,OACLC,YAAY,gBACZnB,UAAU,mCACVoB,MAAOH,EACPI,SAAUL,MCyCDM,E,kDA5Cb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXb,OAAQ,GACRO,YAAa,IAEf,EAAKO,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,gEASE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAErB,OAAQoB,S,qCAIfE,GACbC,KAAKF,SAAS,CAAEd,YAAae,EAAME,OAAOd,U,+BAGlC,IAAD,OACDe,EAAiBF,KAAKV,MAAMb,OAAO0B,QAAO,SAACxB,GAAD,OAC9CA,EAAMT,KAAKkC,cAAcC,SAAS,EAAKf,MAAMN,YAAYoB,kBAE3D,OAAiC,IAA7BJ,KAAKV,MAAMb,OAAO6B,OACb,uCAGL,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CACEiB,YAAagB,KAAKV,MAAMN,YACxBD,aAAciB,KAAKT,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUd,OAAQyB,U,GArCZK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMjC,WAAP,KACE,kBAAC,EAAD,OAEFkC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aa645acd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Scroll = (props) => (\n  <div className=\"overflow-y-scroll ba bw2 vh-75 \">{props.children}</div>\n);\n\nexport default Scroll;\n","import React from \"react\";\nimport \"tachyons\";\nconst Card = ({ name, email, id }) => (\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow\">\n    <img src={`https://robohash.org/${id}?size=200x200`} alt={name} />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardArray = robots.map((robot) => (\n    <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n  ));\n  return (\n    <React.StrictMode>\n      <div>{cardArray}</div>\n    </React.StrictMode>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange, searchField }) => (\n  <div className=\"pa2\">\n    <input\n      type=\"text\"\n      placeholder=\"Search robots\"\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      value={searchField}\n      onChange={searchChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Scroll from \"../Components/Scroll\";\nimport CardList from \"../Components/CardList\";\nimport SearchBox from \"../Components/SearchBox\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchField: event.target.value });\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter((robot) =>\n      robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    );\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox\n            searchField={this.state.searchField}\n            searchChange={this.onSearchChange}\n          />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}